{"version":3,"file":"4.6e241c6240b8eba59bf8.hot-update.js","sources":["webpack:///components/BitcoinMonitor/ShowGraph.js"],"sourcesContent":["import {\r\n    LineChart,\r\n    Line,\r\n    CartesianGrid,\r\n    XAxis,\r\n    YAxis,\r\n    Tooltip,\r\n    Legend,\r\n} from 'recharts'\r\nimport 'isomorphic-fetch'\r\nimport axios from 'axios';\r\n\r\nconst BASE_URL = 'https://api.coindesk.com/v1/bpi';\r\nvar dateFormat = require('dateformat');\r\n\r\nclass Index extends React.Component {\r\n\r\n\r\n\r\n\r\n    static async getInitialProps() {\r\n        //     axios.get(${BASE_URL}/currentprice.json)\r\n        //   .then(response => {\r\n        //     console.log(\"kkk\",response.data.bpi)\r\n        //   });\r\n        const result = {\r\n            key: dateFormat(new Date(), \"h:MM:ss TT\")\r\n        }\r\n        axios.get(`${BASE_URL}/currentprice.json`)\r\n            .then(response => {\r\n                console.log(\"kkk\", response.data)\r\n                Object.keys(response.data.bpi).map((item) => {\r\n                    result[item] = response.data.bpi[item].rate_float\r\n                })\r\n            })\r\n        return { bitcoin: result }\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            data: [this.props.bitcoin]\r\n        }\r\n        this.fetch = this.fetch.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        setInterval(() => {\r\n            this.fetch()\r\n        }, 1000)\r\n    }\r\n\r\n\r\n\r\n\r\n    fetch() {\r\n        const result = {\r\n            key: dateFormat(new Date(), \"h:MM:ss TT\")\r\n        }\r\n        axios.get(`${BASE_URL}/currentprice.json`)\r\n            .then(response => {\r\n                console.log(\"kkk\", response.data)\r\n                Object.keys(response.data.bpi).map((item) => {\r\n                    result[item] = response.data.bpi[item].rate_float\r\n                })\r\n            })\r\n        const gettname = this.props.getnameprice\r\n        axios.get(`${BASE_URL}/currentprice/${gettname}.json`)\r\n        .then(response2 => {\r\n            console.log(\"FFFF\", response2.data)\r\n            Object.keys(response2.data.bpi).map((item) => {\r\n                result[item] = response2.data.bpi[item].rate_float\r\n            })\r\n        })\r\n\r\n        let { data } = this.state\r\n        if (data.length > 10) {\r\n            data.shift();\r\n        }\r\n\r\n\r\n        data.push(result)\r\n        this.setState({\r\n            data: data\r\n        })\r\n        console.log(data)\r\n    }\r\n\r\n    render() {\r\n        var { data } = this.state\r\n        console.log(\"render\", data)\r\n        const coin4 = \"Value.\"+this.props.getnameprice\r\n        const Value = data.map((item) => {\r\n            return { Value: item }\r\n        }\r\n        );\r\n        console.log(\"Map\", Value)\r\n        return (\r\n            <div>\r\n                <LineChart width={1024} height={480} data={Value}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"Value.key\" padding={{ left: 30, right: 30 }} />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"Value.USD\" stroke=\"#8884d8\" activeDot={{ r: 5 }} />\r\n                    <Line type=\"monotone\" dataKey=\"Value.GBP\" stroke=\"#82ca9d\" activeDot={{ r: 5 }} />\r\n                    <Line type=\"monotone\" dataKey=\"Value.EUR\" stroke=\"#d82d36\" activeDot={{ r: 5 }} />\r\n                    <Line type=\"monotone\" dataKey={coin4} stroke=\"#ffff00\" activeDot={{ r: 5 }} />\r\n                </LineChart>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Index\n\n\n// WEBPACK FOOTER //\n// components/BitcoinMonitor/ShowGraph.js"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AASA;AACA;AAEA;AACA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;AAEA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AADA;AAGA;AANA;AAOA;AACA;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;;;AAKA;AACA;AACA;AADA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAlBA;AACA;AAoBA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAlGA;AACA;AAmGA;;;;A","sourceRoot":""}